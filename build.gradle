buildscript {
	ext {
	    springBootVersion = "${springBootVersion}"
	}
	repositories {
		//mavenCentral()
		maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
	    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
	}
	ext.customSecurityRef = ""
}

apply plugin: "java"
apply plugin:'groovy'

repositories {
	//mavenCentral()
		maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
}

allprojects {
	apply plugin: "java"
	//apply plugin: "pmd"
	// apply plugin: "findbugs"
	//apply plugin: "checkstyle"
	repositories {
		//mavenCentral()
		maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}	
	   
	dependencies {
		compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
		testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
	}
	tasks.withType(JavaCompile) {  
		options.encoding = "UTF-8"  
	}
	
	
}
subprojects {
	apply plugin: "java"
	apply plugin: "eclipse"

	repositories {
		//mavenCentral()
		maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		
	}
	jar {
		manifest {
			attributes("Implementation-Title": project.name,
			        "Implementation-Vendor": project.group,
			        "Created-By": project.group,
			        "Implementation-Version": project.version)
		}
	}
	eclipse {
		classpath {
			containers.remove("org.eclipse.jdt.launching.JRE_CONTAINER")
		}
	}
	tasks.withType(JavaCompile) {  
		options.encoding = "UTF-8"  
	}
	task wrapper(type: Wrapper) {
		gradleVersion = "${gradleVersion}"
	}   
	
}


task eclean() << {
	allprojects.each{
		def o = new File(it.projectDir,".project");
		o.delete()
		o = new File(it.projectDir,"bin");
		o.deleteDir()
		o = new File(it.projectDir,".settings");
		o.deleteDir()
		o = new File(it.projectDir,"build.gradle.bak");
		o.delete()
		o = new File(it.projectDir,"logs");
		o.deleteDir()
		o = new File(it.projectDir,"build");
		o.deleteDir()
		o = new File(it.projectDir,".classpath");
		o.delete()
		o = new File(it.projectDir,".factorypath");
		o.delete()
		o = new File(it.projectDir,".apt_generated");
		o.deleteDir()
		o = new File(it.projectDir,".metadata");
		o.deleteDir()
		
	}
}

task ecleanBuild() << {
	allprojects.each{
		def o = new File(it.projectDir,"build");
		o.deleteDir()
	}
}

task startCrm(dependsOn: 'crm:erun') << {

}
task startUpm(dependsOn: 'e-upm:erun') << {

}
task startCas(dependsOn: 'server-cas:erun') << {

}
task startPortal(dependsOn: 'e-portal:erun') << {

}
task startProxy(dependsOn: 'server-proxy:erun') << {

}
